/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package filesystem;

import java.awt.List;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;

/**
 *
 * @author Igor
 */
public class FileSystem extends javax.swing.JFrame {

    public String algorithm;
    ContigousAllocation ca = new ContigousAllocation();
    LinkedAllocation la = new LinkedAllocation();
    public ArrayList<String> FilesName;
    public ArrayList<JFormattedTextField> Files = new ArrayList<>();

    public FileSystem() {
        initComponents();
    }

    public void setAlgorithm(String a) {
        this.algorithm = a;
    }

    public void refreshGui() {
        this.Files.clear();
        this.FilePanel.removeAll();
        this.FilePanel.revalidate();
        this.FilePanel.repaint();
       
        if (this.algorithm.equalsIgnoreCase("CA")) {
            try {
                ca.readFile();
            } catch (Exception ex) {
                Logger.getLogger(FileSystem.class.getName()).log(Level.SEVERE, null, ex);
            }
             this.jFormattedTextFieldFreeBlocks.setText(String.valueOf(ca.getFreeBlocks()));
            
            SuperBlock s = ca.s;
             this.jFormattedTextFieldTotalOfBlocks.setText(String.valueOf(s.numberofblocks));
            if (s.FAT.size() > 0) {
                this.FilesName = new ArrayList(s.FAT.keySet());
                Collections.sort(FilesName);
            for (int i = 0; i < this.FilesName.size(); i++) {
                String file = this.FilesName.get(i);
                int value = s.FAT.get(file);
                Header h = (Header) ca.blocks.get(value);
                String text = h.toString() + "| Header Index: " + " | " + value ;
                this.addTextField(text);
            }
            }
 ca.blocks.clear();
        }
        
             if (this.algorithm.equalsIgnoreCase("LA")) {
            try {
                la.readFile();
            } catch (Exception ex) {
                Logger.getLogger(FileSystem.class.getName()).log(Level.SEVERE, null, ex);
            }
             this.jFormattedTextFieldFreeBlocks.setText(String.valueOf(la.getFreeBlocks()));
            
            SuperBlock s = la.s;
             this.jFormattedTextFieldTotalOfBlocks.setText(String.valueOf(s.numberofblocks));
            if (s.FAT.size() > 0) {
                this.FilesName = new ArrayList(s.FAT.keySet());
                Collections.sort(FilesName);
            for (int i = 0; i < this.FilesName.size(); i++) {
                String file = this.FilesName.get(i);
                int value = s.FAT.get(file);
                Header h = (Header) la.blocks.get(value);
                String text = h.toString() + "| Header Index: " + " | " + value ;
                this.addTextField(text);
            }
            }
 la.blocks.clear();
        }
       
    }

    public void addTextField(String text) {

        JFormattedTextField jFormattedTextField = new javax.swing.JFormattedTextField();

        jFormattedTextField.setEditable(false);

        jFormattedTextField.setBackground(new java.awt.Color(204, 204, 255));

        jFormattedTextField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255), 1, true));

        jFormattedTextField.setText(text);

        jFormattedTextField.setAutoscrolls(false);

        jFormattedTextField.setFocusable(false);

        jFormattedTextField.setMaximumSize(new java.awt.Dimension(1500, 22));
        jFormattedTextField.setMinimumSize(new java.awt.Dimension(700, 22));
        FilePanel.add(jFormattedTextField);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        TotalOfBlocks = new javax.swing.JLabel();
        FreeBlocks = new javax.swing.JLabel();
        InstallFile = new javax.swing.JButton();
        RemoveFile = new javax.swing.JButton();
        FileRecovery = new javax.swing.JButton();
        Exit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jFormattedTextFieldTotalOfBlocks = new javax.swing.JFormattedTextField();
        jFormattedTextFieldFreeBlocks = new javax.swing.JFormattedTextField();
        jScrollFilePanel = new javax.swing.JScrollPane();
        FilePanel = new javax.swing.JPanel();
        FileName = new javax.swing.JLabel();
        jFormattedTextField2 = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("File System");
        setMaximumSize(new java.awt.Dimension(650, 449));
        setMinimumSize(new java.awt.Dimension(650, 449));
        setResizable(false);

        TotalOfBlocks.setText("Total of Blocks:");

        FreeBlocks.setText("Free Blocks:");

        InstallFile.setText("Install File");
        InstallFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    InstallFileActionPerformed(evt);
                } catch (IOException ex) {
                    Logger.getLogger(FileSystem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        RemoveFile.setText("Remove File");
        RemoveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    RemoveFileActionPerformed(evt);
                } catch (IOException ex) {
                    Logger.getLogger(FileSystem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        FileRecovery.setText("File Recovery");
        FileRecovery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    FileRecoveryActionPerformed(evt);
                } catch (IOException ex) {
                    Logger.getLogger(FileSystem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        Exit.setText("Exit ");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        jLabel3.setText("Action:");

        jFormattedTextFieldTotalOfBlocks.setEditable(false);
        jFormattedTextFieldTotalOfBlocks.setBackground(new java.awt.Color(204, 204, 255));
        jFormattedTextFieldTotalOfBlocks.setText("0");
        jFormattedTextFieldTotalOfBlocks.setFocusable(false);

        jFormattedTextFieldFreeBlocks.setEditable(false);
        jFormattedTextFieldFreeBlocks.setBackground(new java.awt.Color(75, 250, 119));
        jFormattedTextFieldFreeBlocks.setText("0");
        jFormattedTextFieldFreeBlocks.setFocusable(false);

        jScrollFilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Files"));

        FilePanel.setMaximumSize(new java.awt.Dimension(500, 338));
        FilePanel.setLayout(new javax.swing.BoxLayout(FilePanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollFilePanel.setViewportView(FilePanel);

        FileName.setText("File Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollFilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(TotalOfBlocks)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jFormattedTextFieldTotalOfBlocks, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(29, 29, 29)
                                                        .addComponent(FreeBlocks)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jFormattedTextFieldFreeBlocks, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(0, 0, Short.MAX_VALUE))
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(FileName)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(jFormattedTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(InstallFile)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(RemoveFile)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(FileRecovery, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(0, 0, Short.MAX_VALUE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addGap(0, 0, Short.MAX_VALUE)
                                                        .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addContainerGap())))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(TotalOfBlocks)
                                .addComponent(FreeBlocks)
                                .addComponent(jFormattedTextFieldTotalOfBlocks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jFormattedTextFieldFreeBlocks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(FileName)
                                .addComponent(jFormattedTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(InstallFile)
                                .addComponent(RemoveFile)
                                .addComponent(FileRecovery))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Exit)
                        .addGap(0, 13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void InstallFileActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
        String filename = this.jFormattedTextField2.getText();
        if (this.algorithm.equalsIgnoreCase("CA")) {
            ca.storeFile(filename);
        } 
        if (this.algorithm.equalsIgnoreCase("LA")) {
            la.storeFile(filename);
        } 
        this.refreshGui();
        
    }

    private void RemoveFileActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
        String filename = this.jFormattedTextField2.getText();
        if (this.algorithm.equalsIgnoreCase("CA")) {
            ca.removeFile(filename);
        } 
        if (this.algorithm.equalsIgnoreCase("LA")) {
            la.removeFile(filename);
        }
        this.refreshGui();
    }

    private void FileRecoveryActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
          String filename = this.jFormattedTextField2.getText();
        if (this.algorithm.equalsIgnoreCase("CA")) {
            ca.restoreFile(filename);
        } 
        if (this.algorithm.equalsIgnoreCase("LA")) {
            la.restoreFile(filename);
        }
    }

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {
       System.exit(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FileSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FileSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FileSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FileSystem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton Exit;
    private javax.swing.JLabel FileName;
    private javax.swing.JPanel FilePanel;
    private javax.swing.JButton FileRecovery;
    private javax.swing.JLabel FreeBlocks;
    private javax.swing.JButton InstallFile;
    private javax.swing.JButton RemoveFile;
    private javax.swing.JLabel TotalOfBlocks;
    private javax.swing.JFormattedTextField jFormattedTextField2;
    private javax.swing.JFormattedTextField jFormattedTextFieldFreeBlocks;
    private javax.swing.JFormattedTextField jFormattedTextFieldTotalOfBlocks;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollFilePanel;
    // End of variables declaration                   
}
